name: libjstack_build
on: [push]

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.os }}-libjstack-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            generator: Visual Studio 16 2019
            pg_service_name: postgresql-x64-13
          - os: ubuntu-latest
            triplet: x64-linux
            generator: Unix Makefiles
          - os: macos-latest
            triplet: x64-osx
            generator: Unix Makefiles

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Cat
        shell: pwsh
        run: cat "$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake"

      - name: Echo
        shell: pwsh
        run: echo ${{ github.workspace }}

      - name: Start Pg (Windows)
        if: contains( matrix.os, 'windows') == true
        shell: pwsh
        run: Set-Service ${{ matrix.pg_service_name }} -StartupType Manual;Start-Service ${{ matrix.pg_service_name }}

      - name: Start Pg (Ubuntu)
        if: contains( matrix.os, 'ubuntu') == true
        shell: pwsh
        run: sudo systemctl start postgresql.service

      - name: Start Pg (MacOS)
        if: contains( matrix.os, 'macos') == true
        shell: pwsh
        run: brew services start postgresql

      - name: Test Pg (Windows)
        if: contains( matrix.os, 'windows') == true
        shell: pwsh
        run: $env:PGPASSWORD="root";."$env:PGBIN\psql.exe" -U postgres -d postgres -c "SELECT 1"

      - name: Test Pg (Ubuntu)
        if: contains( matrix.os, 'ubuntu') == true
        shell: bash
        run: sudo -u postgres psql -d postgres -c "SELECT 1"

      - name: Test Pg (MacOS)
        if: contains( matrix.os, 'macos') == true
        shell: bash
        run: psql -c "SELECT 1" postgres

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Ls
        shell: pwsh
        run: ls ${{ github.workspace }}

      - name: Install dependencies (Vcpkg)
        if: contains( matrix.os, 'windows') == true
        shell: pwsh
        run: vcpkg install boost-filesystem[core]:${{ matrix.triplet }} boost-system[core]:${{ matrix.triplet }} boost-test[core]:${{ matrix.triplet }} curl:${{ matrix.triplet }} libpq:${{ matrix.triplet }}

      - name: Install dependencies (Brew)
        if: contains( matrix.os, 'macos') == true
        shell: bash
        env:
          PKG_CONFIG_PATH: /usr/local/opt/openssl@1.1/lib/pkgconfig
        run: brew install boost openssl libpq curl-openssl; brew link --force openssl; pkg-config --modversion openssl

      - name: Install dependencies (Apt)
        if: contains( matrix.os, 'ubuntu') == true
        shell: bash
        run: sudo apt-get install libboost-filesystem-dev libboost-system-dev libboost-test-dev libssl-dev libpq-dev libpqtypes-dev postgresql-server-dev-all libcurl4-openssl-dev

      - name: Configure CMake (Vcpkg)
        if: contains( matrix.os, 'windows') == true
        shell: pwsh
        working-directory: ${{ github.workspace }}/build
        run: cmake -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE:FILEPATH="$env:VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} ${{ github.workspace }}

      - name: Configure CMake (MacOS)
        if: contains( matrix.os, 'macos') == true
        shell: bash
        env:
          PKG_CONFIG_PATH: /usr/local/opt/openssl@1.1/lib/pkgconfig
        working-directory: ${{ github.workspace }}/build
        run: cmake -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=$BUILD_TYPE ${{ github.workspace }}

      - name: Configure CMake (Ubuntu)
        if: contains( matrix.os, 'ubuntu') == true
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: cmake -G "${{ matrix.generator }}" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_COMPILER="/usr/bin/gcc-10" -DCMAKE_CXX_COMPILER="/usr/bin/g++-10" ${{ github.workspace }}

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: pwsh
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{ github.workspace }}/build
        shell: pwsh
        run: ctest -C $BUILD_TYPE
